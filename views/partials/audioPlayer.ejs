<style>
    .rv_audio_player {
        position: fixed;
        left: 0px;
        bottom: 0px;
        width: 100%;
        height: 55px;
        z-index: 25;
        color: white;
        display: table;
        text-align: center;
        background-color: rgb(76, 182, 203);
    } 
    .circleBtn {
        width: 40px;
        height: 40px;
        font-size: 30px;
        border-radius: 100%;
        text-align: center;
        border: 2px white solid;
        color: white;
        background-color: rgba(0,0,0,0);
    }
    
    /* The audio player section. */
    .audio_buttons {
        position: relative;
        width: 15%;
        height: 55px;
        padding-top: 5px;
        display: table-cell;
    }   
    /* The title area. */
    .title_area {
        position: relative;
        width: 75%;
        height: 55px;
        padding-top: 10px;
        padding-right: 50px;
        display: table-cell;
    }
    /* The repeat/shuffle area. */
    .right_buttons {
        position: relative;
        width: 10%;
        height: 55px;
        padding-top: 7px;
        display: table-cell;
    }
    
    .fa-random, .fa-repeat {
        border: none;
        font-size: 24px;
        padding-top: 14px;
        color: white;
        background-color: rgba(0,0,0,0);
    }
    
</style>



<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css">
</head>


<div class="rv_audio_player">
    
    <div class="audio_buttons">
        <button class="fa fa-step-backward circleBtn" id="stepBackBtn"></button>
        <button class="fa fa-play circleBtn" id="playBtn"></button>
        <button class="fa fa-step-forward circleBtn" id="stepForwardBtn"></button>
    </div>
    
    
    <div class="title_area">
        <p id="audio_title"></p>
        <div id="sliderArea" style="position: relative; display:table; margin: auto;">
            <audio id="rv_loaded_audio" preload="none"> <source src="" type="audio/mp3" codecs="mp3"/> </audio>
            <span style="display:table-cell;" id="curtimetext">0:00</span>&nbsp;&nbsp;&nbsp;<input style="width: 300px; display:table-cell;" type="range" id="seekSlider" min="0" max="100" value="0" step="1">&nbsp;&nbsp;&nbsp;<span style="display:table-cell;" id="durtimetext">0:00</span>
        </div>
    </div>
    
    
    <div class="right_buttons">
        <button class="fa fa-random" id="shuffle_audio_btn"></button>
        <button class="fa fa-repeat" id="loop_audio_btn"></button>
    </div>
    
        
    
    <script src="https://www.gstatic.com/firebasejs/3.7.0/firebase.js"></script>
    <script type="text/javascript" src="/stylesandscripts/firebaseconfig.js"></script>
</div>




<script>
    /* Variables */
    var stepbackBtn = document.getElementById('stepBackBtn');
    var playPauseBtn = $('#playBtn');
    var stepforwardBtn = document.getElementById('stepForwardBtn');
    var shuffleBtn = document.getElementById('shuffle_audio_btn');
    var loopBtn = document.getElementById('loop_audio_btn');
    var title = document.getElementById('audio_title');
    
    var seekSlider = document.getElementById('seekSlider');
    var curTimeText = document.getElementById("curtimetext");
    var durTimeText = document.getElementById("durtimetext");
    
    var recitation;
    var seeking = false;
    var recording = document.getElementById('rv_loaded_audio');
    
    
    
    
    /* Methods */
    function initPlayer() {
        if (typeof(Storage) !== "undefined") {
            currentUser = JSON.parse(window.localStorage.getItem("current_user"));
            recitation = JSON.parse(window.sessionStorage.getItem("recitation_to_look_at"));

            // Load the recording
            storageRef.child(currentUser["userID"]).child(recitation.title).getDownloadURL().then(function(url) {
                var xhr = createCORSRequest('POST', url);
                recording.src = url;
                recording.loop = false;
            });
        }
    }
    
    
    function createCORSRequest(method, url) {
        var xhr = new XMLHttpRequest();
        if ("withCredentials" in xhr) {
            xhr.open(method, url, true);
        } else if (typeof XDomainRequest != "undefined") {
            xhr = new XDomainRequest();
            xhr.open(method, url);
        } else {
            xhr = null;
        }
        return xhr;
    }
 
    
    /*********************
    *    AUDIO SEEKING   *
    **********************/
    
    function audioPlayer_playRecitation() {
        // Set the title area
        title.innerHTML = "<b style='font-size:15px;'>" + recitation.title + "</b>";
        
        // Play the audio
        recording.play();
        
        // Add the listener to update the audio bar
        seekSlider.addEventListener("mousedown", function(event) { seeking = true; seek(event); } );
        seekSlider.addEventListener("mousemove", function(event) { seek(event); } );
        seekSlider.addEventListener("mouseup", function() { seeking = false; } );
        recording.addEventListener("timeupdate", seekTimeUpdate );
        recording.addEventListener("timeupdate", changeButtonIcon );
    };
    
    
    /* For when the user wants to seek through the audio. */
    function seek(event) {
        if(seeking == true) {
            seekSlider.value = event.clientX - seekSlider.offsetLeft;
            var seekto = recording.duration * (seekSlider.value / 100);
            recording.currentTime = seekto;
        }
    }
    
    
    /* Constantly going through the slider time. */
    function seekTimeUpdate() {
        var newTime = recording.currentTime * (100 / recording.duration);
        seekSlider.value = newTime;
        var curmins = Math.floor(recording.currentTime / 60);
        var cursecs = Math.floor(recording.currentTime - curmins * 60);
        var durmins = Math.floor(recording.duration / 60);
        var dursecs = Math.floor(recording.duration - durmins * 60);
        if(cursecs < 10) { cursecs = "0"+cursecs; }
        if(curmins < 10) { curmins = "0"+curmins; }
        if(dursecs < 10) { dursecs = "0"+dursecs; }
        if(durmins < 10) { durmins = "0"+durmins; }
        curTimeText.innerHTML = curmins+":"+cursecs;
        durTimeText.innerHTML = durmins+":"+dursecs;
        
        updatePlayCount();
    }
    
    
    /******************
    *      OTHER      *
    *******************/
    
    
    /** Updates the play count in firebase everytime the audio has reached the end. */
    function updatePlayCount() {
        // See if it is at the end, then increment the play count.
        if(recording.ended == true) {
            recitation.plays += 1;
            fireRef.child("Recitations").child(currentUser["userID"]).child(recitation["title"]).set(recitation);
            return;
        }
    }
    
    /** Updates the icon on the audio player button when the audio should be played or paused. */
    function changeButtonIcon() {
        if(recording != undefined && recording != null) {
            if(recording.ended == false || recording.currentTime != 0) {
                playPauseBtn.addClass('fa-pause');
                playPauseBtn.removeClass('fa-play');
            }
            if(recording.ended == true || recording.currentTime == 0 || recording.paused == true) {
                playPauseBtn.addClass('fa-play');
                playPauseBtn.removeClass('fa-pause');
            }
        } else {
            playPauseBtn.addClass('fa-play');
            playPauseBtn.removeClass('fa-pause');
        }
    }
    
    
    
    
    
    /*******************
    *   BUTTON CLICKS  *
    ********************/
    
    loopBtn.onclick = function() {
        if(recording != null) { 
            recording.loop = !recording.loop;
            if(recording.loop == true) { loopBtn.style.color = "red"; } else { loopBtn.style.color = "white"; }
        }
    };
    
    playPauseBtn.click(function() {
        if(recording != undefined && recording != null) {
            if(playPauseBtn.hasClass("fa-pause")) {
                recording.pause();
                playPauseBtn.addClass('fa-play');
                playPauseBtn.removeClass('fa-pause');
            } else {
                audioPlayer_playRecitation();
            }
        }
    });
    
    
    window.addEventListener("load", initPlayer);
</script>
